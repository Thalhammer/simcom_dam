#pragma once
#include "cstddef"

namespace std {
	template<class T, T v>
	struct integral_constant {
		static constexpr T value = v;
		typedef T value_type;
		typedef integral_constant type;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; }
	};
	typedef integral_constant<bool, true> true_type;
	typedef integral_constant<bool, false> false_type;

	template<class T, unsigned N = 0> struct extent : std::integral_constant<std::size_t, 0> {};
	template<class T> struct extent<T[], 0> : std::integral_constant<std::size_t, 0> {};
	template<class T, unsigned N> struct extent<T[], N> : std::extent<T, N-1> {};
	template<class T, std::size_t I> struct extent<T[I], 0> : std::integral_constant<std::size_t, I> {};
	template<class T, std::size_t I, unsigned N> struct extent<T[I], N> : std::extent<T, N-1> {};


	template<class T> struct remove_reference { typedef T type; };
	template<class T> struct remove_reference<T&> { typedef T type; };
	template<class T> struct remove_reference<T&&> { typedef T type; };
	template<class T> using remove_reference_t = typename remove_reference<T>::type;

	template<class T> struct remove_extent { typedef T type; };
	template<class T> struct remove_extent<T[]> { typedef T type; };
	template<class T, std::size_t N> struct remove_extent<T[N]> { typedef T type; };
	template<class T> using remove_extent_t = typename remove_extent<T>::type;

	template<bool B, class T, class F>
	struct conditional { typedef T type; };
	
	template<class T, class F>
	struct conditional<false, T, F> { typedef F type; };

	template< bool B, class T, class F >
	using conditional_t = typename conditional<B,T,F>::type;

	template<class T>
	struct is_array : std::false_type {};
	
	template<class T>
	struct is_array<T[]> : std::true_type {};
	
	template<class T, std::size_t N>
	struct is_array<T[N]> : std::true_type {};

	// primary template
	template<class>
	struct is_function : std::false_type { };
	
	// specialization for regular functions
	template<class Ret, class... Args>
	struct is_function<Ret(Args...)> : std::true_type {};
	
	// specialization for variadic functions such as std::printf
	template<class Ret, class... Args>
	struct is_function<Ret(Args......)> : std::true_type {};
	
	// specialization for function types that have cv-qualifiers
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile> : std::true_type {};
	
	// specialization for function types that have ref-qualifiers
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile &> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile &&> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile &&> : std::true_type {};
	
	// specializations for noexcept versions of all the above (C++17 and later)
#if __cplusplus >= 201703L
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile & noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) volatile && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args...) const volatile && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) volatile && noexcept> : std::true_type {};
	template<class Ret, class... Args>
	struct is_function<Ret(Args......) const volatile && noexcept> : std::true_type {};
#endif

	namespace detail {
		template <class T>
		struct type_identity { using type = T; }; // or use std::type_identity (since C++20)
		
		template <class T>
		auto try_add_pointer(int) -> type_identity<typename std::remove_reference<T>::type*>;
		template <class T>
		auto try_add_pointer(...) -> type_identity<T>;
	} // namespace detail
	
	template <class T>
	struct add_pointer : decltype(detail::try_add_pointer<T>(0)) {};

	template< class T > struct remove_const          { typedef T type; };
	template< class T > struct remove_const<const T> { typedef T type; };
	
	template< class T > struct remove_volatile             { typedef T type; };
	template< class T > struct remove_volatile<volatile T> { typedef T type; };

	template< class T >
	struct remove_cv {
		typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
	};
	template< class T>
	using remove_cv_t = typename remove_cv<T>::type;


	template< class T >
	struct decay {
	private:
		typedef typename std::remove_reference<T>::type U;
	public:
		typedef typename std::conditional< 
			std::is_array<U>::value,
			typename std::remove_extent<U>::type*,
			typename std::conditional< 
				std::is_function<U>::value,
				typename std::add_pointer<U>::type,
				typename std::remove_cv<U>::type
			>::type
		>::type type;
	};

	// This would be C++17 but we provide it anyway
	template<typename...> struct conjunction : std::true_type { };
	template<typename B1> struct conjunction<B1> : B1 { };
	template<typename B1, typename... Bn>
	struct conjunction<B1, Bn...> 
		: std::conditional_t<bool(B1::value), conjunction<Bn...>, B1> {};

	template<typename _Tp>
    struct underlying_type
    {
    	typedef __underlying_type(_Tp) type;
    };

	template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;

	template<bool B, class T = void>
	struct enable_if {};
	
	template<class T>
	struct enable_if<true, T> { typedef T type; };

	template< bool B, class T = void >
	using enable_if_t = typename enable_if<B,T>::type;

	namespace detail {
		template<typename> struct is_integral_base: std::false_type {};
		template<> struct is_integral_base<bool>: std::true_type {};
		template<> struct is_integral_base<char>: std::true_type {};
		template<> struct is_integral_base<short>: std::true_type {};
		template<> struct is_integral_base<int>: std::true_type {};
		template<> struct is_integral_base<long>: std::true_type {};
		template<> struct is_integral_base<long long>: std::true_type {};
		template<> struct is_integral_base<unsigned char>: std::true_type {};
		template<> struct is_integral_base<unsigned short>: std::true_type {};
		template<> struct is_integral_base<unsigned int>: std::true_type {};
		template<> struct is_integral_base<unsigned long>: std::true_type {};
		template<> struct is_integral_base<unsigned long long>: std::true_type {};
	}
	template<typename T> struct is_integral: detail::is_integral_base<std::remove_cv_t<T>> {};

#if __cplusplus >= 201703L
	template< class T >
	inline constexpr bool is_integral_v = is_integral<T>::value;
#endif

	namespace detail {
		template< class T > struct is_pointer_base     : std::false_type {};
		template< class T > struct is_pointer_base<T*> : std::true_type {};
	}
	template< class T > struct is_pointer : detail::is_pointer_base<typename std::remove_cv<T>::type> {};

#if __cplusplus >= 201703L
	template< class T >
	inline constexpr bool is_pointer_v = is_pointer<T>::value;
#endif
}