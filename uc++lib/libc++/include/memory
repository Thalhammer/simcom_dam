#pragma once
#include "utility"
#include "cstddef"
#include "impl/attributes.h"
#include "new"
#include "cstdint"

namespace std {
	template<class T>
	struct allocator {
		typedef T value_type;
		typedef std::true_type propagate_on_container_move_assignment;
		typedef std::true_type is_always_equal;

		allocator() {}
		~allocator() {}

		NODISCARD T* allocate(std::size_t n, const void* hint) {
			return new T[n];
		}
		NODISCARD T* allocate(std::size_t n) {
			return new T[n];
		}
		void deallocate(T* p, std::size_t) {
			delete[] p;
		}
	};

	template<class T>
	struct default_delete
	{
		constexpr default_delete() noexcept = default;
		template <class U> default_delete( const default_delete<U>& d ) noexcept {}
		void operator()(T* ptr) const { delete ptr; }
	};
	template<class T>
	struct default_delete<T[]>
	{
		constexpr default_delete() noexcept = default;
		template <class U> default_delete( const default_delete<U[]>& d ) noexcept {}
		void operator()(T* ptr) const { delete ptr; }
		template <class U> void operator()(U* ptr) const { delete[] ptr; }
	};

	template<
		class T,
		class Deleter = std::default_delete<T>
	> class unique_ptr {
		T* _ptr;
		Deleter _delete;
	public:
		using pointer = T*;

		unique_ptr(const unique_ptr&) = delete;
		unique_ptr& operator=(const unique_ptr&) = delete;

		constexpr unique_ptr() noexcept : unique_ptr(nullptr) {}
		constexpr unique_ptr(nullptr_t) noexcept : _ptr(nullptr), _delete() {}
		explicit unique_ptr(pointer p) noexcept : _ptr(p), _delete() {}
		unique_ptr(pointer p, Deleter d) noexcept : _ptr(p), _delete(d) {}
		unique_ptr(unique_ptr&& p) noexcept : _ptr(p.release()), _delete(p.get_deleter()) { }
		~unique_ptr() noexcept {
			if(get() != nullptr) {
				get_deleter()(get());
			}
		}
		pointer get() const noexcept { return _ptr; }
		Deleter& get_deleter() noexcept { return _delete; }
		const Deleter& get_deleter() const noexcept { return _delete; }
		explicit operator bool() const noexcept { return get() != nullptr; }

		pointer release() noexcept {
			pointer p = _ptr;
			_ptr = nullptr;
			return p;
		}

		void reset(pointer ptr = pointer()) noexcept {
			auto old_ptr = _ptr;
			_ptr = ptr;
			if(old_ptr != nullptr) get_deleter()(old_ptr);
		}

		void swap(unique_ptr& other) noexcept {
			auto old_ptr = _ptr;
			auto old_delete = _delete;
			_ptr = other._ptr;
			_delete = other._delete;
			other._ptr = old_ptr;
			other._delete = old_delete;
		}

		unique_ptr& operator=(unique_ptr&& r) noexcept {
			reset(r.release());
			_delete = r.get_deleter();
			return *this;
		}
		
		unique_ptr& operator=(nullptr_t) noexcept {
			reset();
			return *this;
		}

		T& operator*() const {
			return *get();
		}

		pointer operator->() const noexcept {
			return get();
		}
	};

	template<
		class T,
		class Deleter
	> class unique_ptr<T[], Deleter> {
		T* _ptr;
		Deleter _delete;
	public:
		using pointer = T*;

		unique_ptr(const unique_ptr&) = delete;
		unique_ptr& operator=(const unique_ptr&) = delete;

		constexpr unique_ptr() noexcept : unique_ptr(nullptr) {}
		constexpr unique_ptr(nullptr_t) noexcept : _ptr(nullptr), _delete() {}
		explicit unique_ptr(pointer p) noexcept : _ptr(p), _delete() {}
		unique_ptr(pointer p, Deleter d) noexcept : _ptr(p), _delete(d) {}
		unique_ptr(unique_ptr&& p) noexcept : _ptr(p.release()), _delete(p.get_deleter()) { }
		~unique_ptr() noexcept {
			if(get() != nullptr) {
				get_deleter()(get());
			}
		}
		pointer get() const noexcept { return _ptr; }
		Deleter& get_deleter() noexcept { return _delete; }
		const Deleter& get_deleter() const noexcept { return _delete; }
		explicit operator bool() const noexcept { return get() != nullptr; }

		pointer release() noexcept {
			pointer p = _ptr;
			_ptr = nullptr;
			return p;
		}

		void reset(pointer ptr = pointer()) noexcept {
			auto old_ptr = _ptr;
			_ptr = ptr;
			if(old_ptr != nullptr) get_deleter()(old_ptr);
		}

		void swap(unique_ptr& other) noexcept {
			auto old_ptr = _ptr;
			auto old_delete = _delete;
			_ptr = other._ptr;
			_delete = other._delete;
			other._ptr = old_ptr;
			other._delete = old_delete;
		}

		unique_ptr& operator=(unique_ptr&& r) noexcept {
			reset(r.release());
			_delete = r.get_deleter();
			return *this;
		}
		
		unique_ptr& operator=(nullptr_t) noexcept {
			reset();
			return *this;
		}

		T& operator*() const {
			return *get();
		}

		pointer operator->() const noexcept {
			return get();
		}

		T& operator[](size_t idx) const {
			return get()[idx];
		}
	};

	template<class T1, class D1, class T2, class D2>
	inline bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return x.get() == y.get();
	}

	template<class T1, class D1, class T2, class D2>
	inline bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return x.get() != y.get();
	}

	// TODO: Use std::less
	// http://en.cppreference.com/w/cpp/memory/unique_ptr/operator_cmp
	template<class T1, class D1, class T2, class D2>
	inline bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return x.get() < y.get();
	}

	template<class T1, class D1, class T2, class D2>
	inline bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return !(y < x);
	}

	template<class T1, class D1, class T2, class D2>
	inline bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return y < x;
	}

	template<class T1, class D1, class T2, class D2>
	inline bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) noexcept {
		return !(x<y);
	}

	template <class T, class D>
	inline bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return !x;
	}

	template <class T, class D>
	inline bool operator==(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return !x;
	}

	template <class T, class D>
	inline bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return (bool)x;
	}

	template <class T, class D>
	inline bool operator!=(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return (bool)x;
	}

	// TODO: Use std::less
	// http://en.cppreference.com/w/cpp/memory/unique_ptr/operator_cmp
	template <class T, class D>
	inline bool operator<(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return x.get() < nullptr;
	}

	template <class T, class D>
	inline bool operator<(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return nullptr < x.get();
	}

	template <class T, class D>
	inline bool operator<=(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return !(nullptr < x.get());
	}

	template <class T, class D>
	inline bool operator<=(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return !(x.get() < nullptr);
	}

	template <class T, class D>
	inline bool operator>(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return nullptr < x.get();
	}

	template <class T, class D>
	inline bool operator>(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return x.get() < nullptr;
	}

	template <class T, class D>
	inline bool operator>=(const unique_ptr<T, D>& x, nullptr_t) noexcept {
		return !(x.get() < nullptr);
	}

	template <class T, class D>
	inline bool operator>=(nullptr_t, const unique_ptr<T, D>& x) noexcept {
		return !(nullptr < x.get());
	}

	template< class T, class Deleter >
	inline void swap( unique_ptr<T,Deleter>& lhs, unique_ptr<T,Deleter>& rhs ) noexcept {
		lhs.swap(rhs);
	}

	template< class T, class... Args >
	inline unique_ptr<T> make_unique( Args&&... args ) {
		return unique_ptr<T>(new T(std::forward<Args>(args)...));
	}

	template< class T >
	inline unique_ptr<T> make_unique( std::size_t size ) {
		return unique_ptr<T>(new typename std::remove_extent<T>::type[size]());
	}

	// TODO: std::hash

	template<typename T>
	class shared_ptr;

	namespace detail {
		class shared_ptr_base {
		protected:
			struct control_base {
				uint32_t refcount;
				uint32_t refcount_control;

				control_base()
					: refcount(1), refcount_control(1)
				{}

				virtual ~control_base() {}
				virtual void destroy() = 0;
			};
			template<typename U, typename Deleter>
			struct control : control_base {
				U* pointer;
				Deleter deleter;

				control(U* pu, Deleter x) :pointer(pu), deleter(x) {}
				control(const control&) = delete;
				control& operator=(const control&) = delete;

				void destroy() override {
					deleter(pointer);
				}
			};

			template<typename U>
			struct make_shared_control : control_base {
				alignas(alignof(U)) char obj[sizeof(U)];

				template<class... Args>
				make_shared_control(Args&&... args)
				{
					new(obj) U(std::forward<Args>(args)...);
				}
				void destroy() override {
					reinterpret_cast<U*>(obj)->~U();
				}
			};

			control_base* m_control;

			void increment() const noexcept {
				if(m_control) {
					__atomic_add_fetch(&m_control->refcount, 1, __ATOMIC_RELAXED);
					__atomic_add_fetch(&m_control->refcount_control, 1, __ATOMIC_RELAXED);
				}
			}

			bool increment_nonzero() const noexcept {
				if(!m_control) return false;
				uint32_t old_val;
				uint32_t new_val;
				__atomic_load(&m_control->refcount, &old_val, __ATOMIC_RELAXED);
				do
				{
					if (old_val == 0) return false;
					new_val = old_val + 1;
				} while (!__atomic_compare_exchange(&m_control->refcount, &old_val, &new_val, true, __ATOMIC_RELAXED, __ATOMIC_RELAXED));
				__atomic_add_fetch(&m_control->refcount_control, 1, __ATOMIC_RELAXED);

				return true;
			}

			void decrement() const noexcept {
				if(m_control) {
					if(__atomic_sub_fetch(&m_control->refcount, 1, __ATOMIC_RELAXED) == 0)
						m_control->destroy();
					if(__atomic_sub_fetch(&m_control->refcount_control, 1, __ATOMIC_RELAXED) == 0)
						delete m_control;
				}
			}

			void increment_weak() const {
				if(m_control) {
					__atomic_add_fetch(&m_control->refcount_control, 1, __ATOMIC_RELAXED);
				}
			}

			void decrement_weak() const {
				if(m_control) {
					if(__atomic_sub_fetch(&m_control->refcount_control, 1, __ATOMIC_RELAXED) == 0) {
						delete m_control;
					}
				}
			}

			shared_ptr_base(control_base* ptr)
				: m_control(ptr)
			{}
		};
	}

	template<typename T>
	class weak_ptr;

	template<typename T>
	class shared_ptr : detail::shared_ptr_base {
	public:
		typedef T element_type;
	private:
		element_type* m_pointer;

		// TODO: Allocator support
		// TODO: Weak ptr support
		template<typename U> friend class shared_ptr;
		template<typename U> friend class weak_ptr;
		template<typename U, class... Args> friend shared_ptr<U> make_shared(Args&&... args);
		template <class T2, class U> friend shared_ptr<T2> static_pointer_cast(const shared_ptr<U>& sp) noexcept;
		template <class T2, class U> friend shared_ptr<T2> dynamic_pointer_cast(const shared_ptr<U>& sp) noexcept;
		template <class T2, class U> friend shared_ptr<T2> const_pointer_cast(const shared_ptr<U>& sp) noexcept;
	public:
		constexpr shared_ptr() noexcept
			: detail::shared_ptr_base(nullptr), m_pointer(nullptr)
		{}

		constexpr shared_ptr(nullptr_t) noexcept
			: shared_ptr()
		{}

		template<class U>
		explicit shared_ptr(U* ptr)
			: detail::shared_ptr_base(new control<U,std::default_delete<U>>(ptr,std::default_delete<U>())), m_pointer(ptr)
		{}

		template<class U, class Deleter>
		shared_ptr(U* ptr, Deleter d)
			: detail::shared_ptr_base(new control<U,Deleter>(ptr,d)), m_pointer(ptr)
		{}

		template<class Deleter>
		shared_ptr(nullptr_t ptr, Deleter d)
			: detail::shared_ptr_base(new control<T,Deleter>(ptr,d)), m_pointer(ptr)
		{}

		shared_ptr(const shared_ptr& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			this->increment();
		}

		template<class U>
		shared_ptr(const shared_ptr<U>& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			this->increment();
		}

		template<class U>
		explicit shared_ptr(const weak_ptr<U>& x);

		shared_ptr(shared_ptr&& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			s.m_control = nullptr;
			s.m_pointer = nullptr;
		}

		template<class U>
		shared_ptr(shared_ptr<U>&& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			s.m_control = nullptr;
			s.m_pointer = nullptr;
		}

		template<class U, class D>
		shared_ptr(unique_ptr<U, D>&& s)
			: shared_ptr(s.get(), s.get_deleter())
		{
			s.release();
		}

		template<class U>
		shared_ptr(const shared_ptr<U>& s, element_type* ptr)
			: detail::shared_ptr_base(s.m_control), m_pointer(ptr)
		{
			this->increment();
		}

		~shared_ptr() {
			this->decrement();
		}

		shared_ptr& operator=(const shared_ptr& s) noexcept {
			if(this != &s)
			{
				// Decrement old ptr
				this->decrement();

				// Copy over and increment new one
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				this->increment();
			}        
			return *this;
		}

		template<typename U>
		shared_ptr& operator=(const shared_ptr<U>& s) noexcept {
			if((void*)this != (void*)&s)
			{
				// Decrement old ptr
				this->decrement();

				// Copy over and increment new one
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				this->increment();
			}        
			return *this;
		}

		shared_ptr& operator=(shared_ptr&& s) noexcept {
			if(this != &s)
			{
				// Decrement old ptr
				this->decrement();

				m_control = s.m_control;
				m_pointer = s.m_pointer;
				s.m_control = nullptr;
				s.m_pointer = nullptr;
				
				// No need to increment new ptr as we moved it
			}        
			return *this;
		}

		template<typename U>
		shared_ptr& operator=(shared_ptr<U>&& s) noexcept {
			if((void*)this != (void*)&s)
			{
				// Decrement old ptr
				this->decrement();

				m_control = s.m_control;
				m_pointer = s.m_pointer;
				s.m_control = nullptr;
				s.m_pointer = nullptr;

				// No need to increment new ptr as we moved it
			}        
			return *this;
		}

		template<typename U, typename D>
		shared_ptr& operator=(unique_ptr<U, D>&& u) noexcept {
			m_control = new control<U,D>(u.get(),u.get_deleter());
			m_pointer = u.release();
			return *this;
		}

		void swap(shared_ptr& other) noexcept {
			auto tmp_control = m_control;
			m_control = other.m_control;
			other.m_control = tmp_control;

			auto tmp_pointer = m_pointer;
			m_pointer = other.m_pointer;
			other.m_pointer = tmp_pointer;
		}

		void reset() noexcept {
			this->decrement();
			m_control = nullptr;
			m_pointer = nullptr;
		}

		template<class U>
		void reset (U* ptr) {
			this->reset(ptr, std::default_delete<U>{});
		}

		template<class U, class D>
		void reset (U* ptr, D del) {
			this->decrement();
			m_control = new control<U,D>(ptr,del);
			m_pointer = ptr;
		}

		// TODO: Allocator
		//template <class U, class D, class Alloc> void reset (U* p, D del, Alloc alloc);

		element_type* get() const noexcept { return m_pointer; }

		element_type* operator->() const noexcept { return m_pointer; }
		element_type& operator*() const noexcept { return *m_pointer; }

		long int use_count() const noexcept {
			uint32_t cnt = 0;
			if(m_control) __atomic_load(&m_control->refcount, &cnt, __ATOMIC_RELAXED);
			return cnt;
		}

		bool unique() const noexcept {
			return use_count() == 1;
		}

		explicit operator bool() const noexcept {
			return get() != nullptr;
		}

		template<class U>
		bool owner_before(const shared_ptr<U>& x) const noexcept {
			return m_control < x.m_control;
		}
	};

	class bad_weak_ptr : public exception {
	public:
		bad_weak_ptr() {}
		const char* what() const noexcept { return "bad_weak_ptr"; }
	};

	template<typename T>
	class weak_ptr : detail::shared_ptr_base {
	public:
		typedef T element_type;
	private:
		element_type* m_pointer;

		// TODO: Allocator support
	public:
		constexpr weak_ptr() noexcept
			: detail::shared_ptr_base(nullptr), m_pointer(nullptr)
		{}

		weak_ptr(const weak_ptr& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			this->increment_weak();
		}

		template<class U>
		weak_ptr(const weak_ptr<U>& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			this->increment_weak();
		}

		template<class U>
		weak_ptr(const shared_ptr<U>& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			this->increment_weak();
		}

		weak_ptr(weak_ptr&& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			s.m_control = nullptr;
			s.m_pointer = nullptr;
		}

		template<class U>
		weak_ptr(weak_ptr<U>&& s)
			: detail::shared_ptr_base(s.m_control), m_pointer(s.m_pointer)
		{
			s.m_control = nullptr;
			s.m_pointer = nullptr;
		}

		~weak_ptr() {
			this->decrement_weak();
		}

		template<typename U>
		weak_ptr& operator=(const weak_ptr<U>& s) noexcept {
			if(this != &s)
			{
				// Decrement old ptr
				this->decrement_weak();

				// Copy over and increment new one
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				this->increment_weak();
			}        
			return *this;
		}

		weak_ptr& operator=(const weak_ptr& s) noexcept {
			if(this != &s)
			{
				// Decrement old ptr
				this->decrement_weak();

				// Copy over and increment new one
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				this->increment_weak();
			}        
			return *this;
		}

		template<typename U>
		weak_ptr& operator=(const shared_ptr<U>& s) noexcept {
			// Decrement old ptr
			this->decrement_weak();

			// Copy over and increment new one
			m_control = s.m_control;
			m_pointer = s.m_pointer;
			this->increment_weak();        
			return *this;
		}

		template<typename U>
		weak_ptr& operator=(weak_ptr<U>&& s) noexcept {
			if(this != &s)
			{
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				s.m_control = nullptr;
				s.m_pointer = nullptr;
			}        
			return *this;
		}

		weak_ptr& operator=(weak_ptr&& s) noexcept {
			if(this != &s)
			{
				m_control = s.m_control;
				m_pointer = s.m_pointer;
				s.m_control = nullptr;
				s.m_pointer = nullptr;
			}        
			return *this;
		}

		void swap(weak_ptr& other) noexcept {
			auto tmp_control = m_control;shared_ptr<element_type>
			m_control = other.m_control;
			other.m_control = tmp_control;

			auto tmp_pointer = m_pointer;
			m_pointer = other.m_pointer;
			other.m_pointer = tmp_pointer;
		}

		void reset() noexcept {
			this->decrement_weak();
			m_control = nullptr;
			m_pointer = nullptr;
		}

		long int use_count() const noexcept {
			uint32_t cnt = 0;
			if(m_control) __atomic_load(&m_control->refcount, &cnt, __ATOMIC_RELAXED);
			return cnt;
		}

		bool expired() const noexcept {
			return use_count() == 0;
		}

		shared_ptr<element_type> lock() const noexcept {
			shared_ptr<element_type> ret;
			if(!increment_nonzero()) return ret;
			ret.m_control = m_control;
			ret.m_pointer = m_pointer;
			return ret;
		}

		template<class U>
		bool owner_before(const weak_ptr<U>& x) const noexcept {
			return m_control < x.m_control;
		}

		template<class U>
		bool owner_before(const shared_ptr<U>& x) const noexcept {
			return m_control < x.m_control;
		}
	};


	template<class T>
	template<class U>
	shared_ptr<T>::shared_ptr(const weak_ptr<U>& x)
		: shared_ptr()
	{
		auto ptr = x.lock();
		if(!ptr) throw std::bad_weak_ptr();
		ptr.swap(*this);
	}

	template <class T>
	void swap (shared_ptr<T>& x, shared_ptr<T>& y) noexcept {
		x.swap(y);
	}

	template <class T>
	void swap (weak_ptr<T>& x, weak_ptr<T>& y) noexcept {
		x.swap(y);
	}


	template<typename T>
	class enable_shared_from_this {
		weak_ptr<T> m_weak_this;
		template <class U, class... Args>
		friend shared_ptr<U> make_shared (Args&&... args);

		template <typename U>
		static void set_weak_ptr(std::enable_shared_from_this<U>* arg, shared_ptr<U>& ptr) {
			arg->m_weak_this = ptr;
		}

		template <typename U>
		static void set_weak_ptr(void* arg, shared_ptr<U>& ptr) {
		}
	public:
		constexpr enable_shared_from_this() noexcept
			: m_weak_this()
		{}

		virtual ~enable_shared_from_this() {}

		shared_ptr<T> shared_from_this() {
			return m_weak_this.lock();
		}

		shared_ptr<const T> shared_from_this() const {
			return m_weak_this.lock();
		}
	};

	template <class T, class... Args>
	shared_ptr<T> make_shared (Args&&... args) {
		//return std::shared_ptr<T>(new T(std::forward<Args>(args)...));
		shared_ptr<T> ptr;
		auto ctrl = new detail::shared_ptr_base::make_shared_control<T>(std::forward<Args>(args)...);
		ptr.m_control = ctrl;
		ptr.m_pointer = reinterpret_cast<T*>(ctrl->obj);
		enable_shared_from_this<T>::set_weak_ptr(ptr.m_pointer, ptr);
		return ptr;
	}

	//TODO: allocate_shared

	template <class T, class U>
	shared_ptr<T> static_pointer_cast(const shared_ptr<U>& sp) noexcept {
		shared_ptr<T> ptr;
		if(sp) {
			sp.increment();
			ptr.m_control = sp.m_control;
			ptr.m_pointer = static_cast<T*>(sp.m_pointer);
		}
		return ptr;
	}

	template <class T, class U>
	shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& sp) noexcept {
		shared_ptr<T> ptr;
		if(sp) {
			sp.increment();
			ptr.m_control = sp.m_control;
			ptr.m_pointer = dynamic_cast<T*>(sp.m_pointer);
		}
		return ptr;
	}

	template <class T, class U>
	shared_ptr<T> const_pointer_cast(const shared_ptr<U>& sp) noexcept {
		shared_ptr<T> ptr;
		if(sp) {
			sp.increment();
			ptr.m_control = sp.m_control;
			ptr.m_pointer = const_cast<T*>(sp.m_pointer);
		}
		return ptr;
	}

	//TODO: get_deleter

	template<class P> struct owner_less;  // not defined

	template<class T> struct owner_less <shared_ptr<T>>
	{
		typedef bool result_type;
		typedef shared_ptr<T> first_argument_type;
		typedef shared_ptr<T> second_argument_type;
		bool operator() (const shared_ptr<T>& x, const shared_ptr<T>& y) const {return x.owner_before(y);}
		bool operator() (const shared_ptr<T>& x, const weak_ptr<T>& y) const {return x.owner_before(y);}
		bool operator() (const weak_ptr<T>& x, const shared_ptr<T>& y) const {return x.owner_before(y);}
	};

	template<class T> struct owner_less <weak_ptr<T>>
	{
		typedef bool result_type;
		typedef weak_ptr<T> first_argument_type;
		typedef weak_ptr<T> second_argument_type;
		bool operator() (const weak_ptr<T>& x, const weak_ptr<T>& y) const {return x.owner_before(y);}
		bool operator() (const shared_ptr<T>& x, const weak_ptr<T>& y) const {return x.owner_before(y);}
		bool operator() (const weak_ptr<T>& x, const shared_ptr<T>& y) const {return x.owner_before(y);}
	};

	template<class T, class U>
	bool operator==(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs) noexcept {
		return lhs.get() == rhs.get();
	}

	template<class T>
	bool operator== (const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() == nullptr;
	}

	template<class T>
	bool operator== (nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr == rhs.get();
	}

	template<class T, class U>
	bool operator!=(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs) noexcept {
		return lhs.get() != rhs.get();
	}

	template<class T>
	bool operator!= (const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() != nullptr;
	}

	template<class T>
	bool operator!= (nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr != rhs.get();
	}

	template<class T, class U>
	bool operator<(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs) noexcept {
		return lhs.get() < rhs.get();
	}

	template<class T>
	bool operator<(const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() < nullptr;
	}
	
	template<class T>
	bool operator<(nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr < rhs.get();
	}

	template<class T>
	bool operator<=(const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() <= nullptr;
	}

	template<class T>
	bool operator<=(nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr <= rhs;
	}

	template<class T>
	bool operator>(const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() > nullptr;
	}

	template<class T>
	bool operator>(nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr > rhs.get();
	}

	template<class T>
	bool operator>=(const shared_ptr<T>& lhs, nullptr_t) noexcept {
		return lhs.get() >= nullptr;
	}

	template<class T>
	bool operator>=(nullptr_t, const shared_ptr<T>& rhs) noexcept {
		return nullptr >= rhs.get();
	}

}