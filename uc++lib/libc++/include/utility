#pragma once
#include "type_traits"

namespace std {
	template<typename T>
	constexpr T && forward(typename std::remove_reference<T>::type & t) noexcept
	{
		return static_cast<T &&>(t);
	}

	template<typename T>
	constexpr T && forward(typename std::remove_reference<T>::type && t) noexcept
	{
		return static_cast<T &&>(t);
	}

	template<typename T>
	inline typename std::remove_reference<T>::type && move(T && t)
	{
		return static_cast<typename std::remove_reference<T>::type&&>(t);
	}
}